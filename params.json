{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Staticlet","tagline":"A servlet for serving files restfully according to HTTP/1.0 & HTTP/1.1","google":"UA-36048640-5","body":"\r\nstaticlet\r\n=========\r\n\r\nWhat staticlet is\r\n-----------------\r\n\r\nStaticlet is a servlet for serving files restfully according to HTTP/1.0 & HTTP/1.1\r\nsupporting only the GET & HEAD methods. In other words, it expose a filesystem tree as\r\nread only resources. It is a quite small and has only one dependency.\r\n\r\n\r\n\r\nWhat staticlet do ...\r\n---------------------\r\n\r\n... good\r\n\r\n- HTTP/1.0 (strict) and HTTP/1.1 conditional GET & HEAD support\r\n- HTTP/1.1 ranges support (mostly as in the BalusC FileServlet)\r\n- Pluggable ETag generation, several implementations provided\r\n\r\n... not so good\r\n\r\n- Hide files starting with a '.'\r\n- Simple directory listing support (in memory & not conditional & no html cache : naive & ineficient ... IOW useless for now)\r\n\r\n\r\n\r\nQuickstart\r\n----------\r\n\r\nWARNING! No released version yet, you'll have to clone and build it locally.\r\n\r\nYou'll need maven or an ide supporting it to easily build staticlet.\r\n\r\nstaticlet is split in modules:\r\n\r\n- staticlet-core            Most of the code is here\r\n- staticlet-testsupport     Test code & resources\r\n- staticlet-classic         Depend on this one to use the Staticlet servlet configured via init-params\r\n\r\nstaticlet has only slf4j-api as dependency for logging, choose your implementation.\r\n\r\n\r\n\r\nConfiguration\r\n-------------\r\n\r\nInitial parameters:\r\n\r\n    docRoot             String      Path to the staticlet servlet docroot\r\n                                    Mandatory\r\n    directoryListing    Boolean     Is directory listing enabled ?\r\n                                    Optionnal, defaults to false\r\n    bufferSize          Integer     Size of the buffer used when streaming data from filesystem to clients Defaults\r\n                                    Optionnal, defaults to false\r\n    expireTime          Long        HttpHeaders.EXPIRES, System.currentTimeMillis() + configuration.getExpireTime()\r\n                                    Optionnal, defaults to one week\r\n\r\n\r\n\r\nQi4j\r\n----\r\n\r\nA ServiceComposite with the staticlet servlet as a Mixin is available in the qi4j-lib-staticlet project.\r\nYou'll need to configure it à là Qi4j using the StaticletConfiguration composite.\r\nNo assembly facility yet but it's really simple, look at the unit tests.\r\n\r\n\r\n\r\n\r\nHacking\r\n-------\r\n\r\nHere are the links to the two HTTP RFCs:\r\n\r\n- HTTP/1.1 http://www.ietf.org/rfc/rfc2616\r\n- HTTP/1.0 http://www.ietf.org/rfc/rfc1945\r\n\r\nIf you have any question, remark, whatever or found a flaw in the implementation or are having\r\nissues using staticlet, don't hesitate to create a github issue here.\r\n\r\n\r\n\r\n\r\nTODO\r\n----\r\n\r\nUnit tests\r\n\r\n - factor test code and ressources in staticlet-testsupport so staticlet-classic and qi4j-lib-staticlet can be tested automagically\r\n - implements tests for HTTP/1.0 & HTTP/1.1\r\n - rebuild staticlet-docroot.zip with random data so we can make byte level comparisons in client for ranges\r\n\r\nVarious\r\n\r\n - cleanup logging: no info level logging with debug level meaning HTTP protocol level and trace meaning code level\r\n - add support for path overlays (ie. / goes to /storage/root, /mirror goes to /storage/mirrors and /public goes to /storage/var/public)\r\n   hint: need a FileFactory that create java.io.File instances resolving the real path, need to define interface & configuration\r\n - refactor FileRepresenter.processRangeHeaders() to lower code complexity, need unit tests before\r\n - send a 401 when a .nolist file is present in directory (not activated by default)\r\n - send a 404 when a .hidden file is present in path (not activated by default)\r\n\r\nCaching\r\n\r\n - configuration: write on disk cache data in the live filesystem or in an \"overlay\" stored elsewhere\r\n - implement cache using the jsr107 api with ehcache\r\n - add a way to bybass gzip compression (path patterns, mime-types) [reminder: mime-types are defined by the container and then in web.xml mime-mapping elements]\r\n - cache gzipped content on disk (path patterns, size limit)\r\n - cache node that hides listing in a Map<TimeStamp,Path>\r\n    - keep shorter paths only\r\n    - configurable TTL of cache entries\r\n - cache directory representation\r\n    - in memory: store in a Map<TimeStamp,Path>, ttl\r\n    - on disk: path, ttl, emptyOnStart\r\n - provide a way to empty cache at runtime (file presence and lastModified polling ?)\r\n\r\n"}